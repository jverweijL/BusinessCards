/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.demo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.demo.model.businesscard;
import com.liferay.demo.model.businesscardModel;
import com.liferay.demo.model.businesscardSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the businesscard service. Represents a row in the &quot;DEMO_businesscard&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link businesscardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link businesscardImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see businesscardImpl
 * @see businesscard
 * @see businesscardModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class businesscardModelImpl extends BaseModelImpl<businesscard>
	implements businesscardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a businesscard model instance should use the {@link businesscard} interface instead.
	 */
	public static final String TABLE_NAME = "DEMO_businesscard";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "businesscardId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "position", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "company", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businesscardId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("company", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DEMO_businesscard (uuid_ VARCHAR(75) null,businesscardId LONG not null primary key,name VARCHAR(75) null,position VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,company VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DEMO_businesscard";
	public static final String ORDER_BY_JPQL = " ORDER BY businesscard.businesscardId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DEMO_businesscard.businesscardId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.demo.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.demo.model.businesscard"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.demo.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.demo.model.businesscard"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.demo.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.demo.model.businesscard"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long BUSINESSCARDID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static businesscard toModel(businesscardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		businesscard model = new businesscardImpl();

		model.setUuid(soapModel.getUuid());
		model.setBusinesscardId(soapModel.getBusinesscardId());
		model.setName(soapModel.getName());
		model.setPosition(soapModel.getPosition());
		model.setEmail(soapModel.getEmail());
		model.setPhone(soapModel.getPhone());
		model.setCompany(soapModel.getCompany());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<businesscard> toModels(businesscardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<businesscard> models = new ArrayList<businesscard>(soapModels.length);

		for (businesscardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.demo.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.demo.model.businesscard"));

	public businesscardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _businesscardId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBusinesscardId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _businesscardId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return businesscard.class;
	}

	@Override
	public String getModelClassName() {
		return businesscard.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("businesscardId", getBusinesscardId());
		attributes.put("name", getName());
		attributes.put("position", getPosition());
		attributes.put("email", getEmail());
		attributes.put("phone", getPhone());
		attributes.put("company", getCompany());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long businesscardId = (Long)attributes.get("businesscardId");

		if (businesscardId != null) {
			setBusinesscardId(businesscardId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String position = (String)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String company = (String)attributes.get("company");

		if (company != null) {
			setCompany(company);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getBusinesscardId() {
		return _businesscardId;
	}

	@Override
	public void setBusinesscardId(long businesscardId) {
		_businesscardId = businesscardId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return StringPool.BLANK;
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		_position = position;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return StringPool.BLANK;
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			businesscard.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public businesscard toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (businesscard)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		businesscardImpl businesscardImpl = new businesscardImpl();

		businesscardImpl.setUuid(getUuid());
		businesscardImpl.setBusinesscardId(getBusinesscardId());
		businesscardImpl.setName(getName());
		businesscardImpl.setPosition(getPosition());
		businesscardImpl.setEmail(getEmail());
		businesscardImpl.setPhone(getPhone());
		businesscardImpl.setCompany(getCompany());

		businesscardImpl.resetOriginalValues();

		return businesscardImpl;
	}

	@Override
	public int compareTo(businesscard businesscard) {
		long primaryKey = businesscard.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof businesscard)) {
			return false;
		}

		businesscard businesscard = (businesscard)obj;

		long primaryKey = businesscard.getPrimaryKey();

        return getPrimaryKey() == primaryKey;
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		businesscardModelImpl businesscardModelImpl = this;

		businesscardModelImpl._originalUuid = businesscardModelImpl._uuid;

		businesscardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<businesscard> toCacheModel() {
		businesscardCacheModel businesscardCacheModel = new businesscardCacheModel();

		businesscardCacheModel.uuid = getUuid();

		String uuid = businesscardCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			businesscardCacheModel.uuid = null;
		}

		businesscardCacheModel.businesscardId = getBusinesscardId();

		businesscardCacheModel.name = getName();

		String name = businesscardCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			businesscardCacheModel.name = null;
		}

		businesscardCacheModel.position = getPosition();

		String position = businesscardCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			businesscardCacheModel.position = null;
		}

		businesscardCacheModel.email = getEmail();

		String email = businesscardCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			businesscardCacheModel.email = null;
		}

		businesscardCacheModel.phone = getPhone();

		String phone = businesscardCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			businesscardCacheModel.phone = null;
		}

		businesscardCacheModel.company = getCompany();

		String company = businesscardCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			businesscardCacheModel.company = null;
		}

		return businesscardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", businesscardId=");
		sb.append(getBusinesscardId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", company=");
		sb.append(getCompany());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.demo.model.businesscard");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businesscardId</column-name><column-value><![CDATA[");
		sb.append(getBusinesscardId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>company</column-name><column-value><![CDATA[");
		sb.append(getCompany());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = businesscard.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			businesscard.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _businesscardId;
	private String _name;
	private String _position;
	private String _email;
	private String _phone;
	private String _company;
	private long _columnBitmask;
	private businesscard _escapedModel;
}